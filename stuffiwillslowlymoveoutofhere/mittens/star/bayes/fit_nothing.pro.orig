FUNCTION fit_nothing, lc, templates, fit, priors, nothing, variability_model=variability_model, systematics_model=systematics_model

	common mearth_tools
	@filter_parameters
	tonight = round(nothing.hjd-timezone)
	nights = round(lc.hjd-timezone)
	i_consider = where(lc.okay and nights eq tonight, N)
	i_tonight = where(nights eq tonight, N_tonight)
	i_include = where(fit.solved and (fit.is_variability eq 0 or strmatch(fit.name, 'SIN*') eq 1 or strmatch(fit.name, 'COS*') eq 1 or strmatch(fit.name, 'NIGHT'+strcompress(/remo, tonight)) eq 1), M)
	N_withpriors = N + M
	M_withnothing = M



	if n eq 0 then begin
		coef = priors[i_include].coef
	endif else begin
		;	for k=0, n_elements(nothing.duration)-1 do begin
		k=0
		this_nothing = {hjd0:nothing.hjd}
		; loop until rescaling converges
		rescaling = 1.0
		converged = 0
		while(~converged) do begin
			previous_rescaling = rescaling

	
			; set up model
			A = dblarr(N_withpriors, M_withnothing)
			for i=0, M-1 do A[0:N-1,i] = templates.(i_include[i])[i_consider]/lc[i_consider].fluxerr/rescaling
			for i=0, M-1 do A[N+i,i] = 1.0/priors[i_include[i]].uncertainty;templates.(i_include[i])[i_consider]
	
			; setup data + priors
			b = fltarr(N_withpriors)
			b[0:N-1] = lc[i_consider].flux/lc[i_consider].fluxerr/rescaling
			b[N:*] = priors[i_include].coef/priors[i_include].uncertainty
	
			svdc, A, W, U, V, /double, /column
			coef = dblarr(M_withnothing)		
	
			variances = dblarr(M_withnothing)
			singular_limit = 1e-5
			for i=0, M_withnothing-1 do begin
				if w[i] gt singular_limit then begin
					coef += total(u[*,i]*b)/w[i]*v[*,i]
					variances += (v[*,i]/w[i])^2
		;			fit[i_include[i]].is_needed = 1
				endif else begin
			;		fit[i_include[i]].is_needed = 0
				end
			endfor
			fit[i_include].weight = w[0:M-1]
			fit[i_include].coef = coef[0:M-1]
			fit[i_include].uncertainty = sqrt(variances[0:M-1])
			nothing.n = N

<<<<<<< local
			if n_elements(variability_model) gt 0 and n_elements(systematics_model) gt 0 then begin
				i_systematics = where(fit[i_include].is_variability eq 0, M_systematics)
				i_variability = where(fit[i_include].is_variability, M_variability)
				variability_model[i_tonight] =0
				systematics_model[i_tonight] =0
				for i=0, M_variability-1 do variability_model[i_tonight] += coef[i_variability[i]]*templates.(i_include[i_variability[i]])[i_tonight]
				for i=0, M_systematics-1 do systematics_model[i_tonight] += coef[i_systematics[i]]*templates.(i_include[i_systematics[i]])[i_tonight]
				plot, lc.flux
				oplot, color=150, variability_model+systematics_model
	;			model = variability_model + systematics_model
			endif
	
			model = fltarr(n) 
			for i=0, M-1 do model += coef[i]*templates.(i_include[i])[i_consider]
			residuals = lc[i_consider].flux - model
	
			chi_sq = total((residuals/lc.fluxerr)^2);+ total(deviates_from_prior^2)
		
			rescaling = sqrt(chi_sq/n) > 1
			converged = abs((rescaling - previous_rescaling)/rescaling) lt 0.01
			fit[n_elements(fit)-1].coef = rescaling
			fit[n_elements(fit)-1].uncertainty = sqrt(chi_sq/n^2/2.0)
		endwhile
	endelse
=======
		variances = dblarr(M_withnothing)
		singular_limit = 1e-5
		for i=0, M_withnothing-1 do begin
			if w[i] gt singular_limit then begin
				coef += total(u[*,i]*b)/w[i]*v[*,i]
				variances += (v[*,i]/w[i])^2
	;			fit[i_include[i]].is_needed = 1
			endif else begin
		;		fit[i_include[i]].is_needed = 0
			end
		endfor
		fit[i_include].weight = w[0:M-1]
		fit[i_include].coef = coef[0:M-1]
		fit[i_include].uncertainty = sqrt(variances[0:M-1])
		nothing.n = N
	endelse			
; 		model = fltarr(n) 
; 		for i=0, M-1 do model += coef[i]*templates.(i_include[i])[i_consider]
; 		model_with_nothing = model

		if n_elements(variability_model) gt 0 and n_elements(systematics_model) gt 0 then begin
			i_systematics = where(fit[i_include].is_variability eq 0, M_systematics)
			i_variability = where(fit[i_include].is_variability, M_variability)
variability_model[i_tonight] =0
systematics_model[i_tonight] =0
			for i=0, M_variability-1 do variability_model[i_tonight] += coef[i_variability[i]]*templates.(i_include[i_variability[i]])[i_tonight]
			for i=0, M_systematics-1 do systematics_model[i_tonight] += coef[i_systematics[i]]*templates.(i_include[i_systematics[i]])[i_tonight]
;			plot, lc.flux
;			oplot, color=150, variability_model+systematics_model
;			model = variability_model + systematics_model
		endif

; 		residuals = lc[i_consider].flux - model_with_nothing
; 		deviates_from_prior = (fit[i_include].coef - priors[i_include].coef)/priors[i_include].uncertainty
; 		chi_sq = total((residuals/lc.fluxerr)^2);+ total(deviates_from_prior^2)
; ; 				print, 'n = ', n, ', m = ', m
; ; 				print, 'chi_sq = ', total((residuals/lc.fluxerr)^2), ', chi_prior =', + total(deviates_from_prior^2)
; 
; 		fit[n_elements(fit)-1].coef = sqrt(chi_sq/n) > 1
; 		fit[n_elements(fit)-1].uncertainty = sqrt(chi_sq/n^2/2.0)
; 		fit[where(fit.solved)].uncertainty*=fit[n_elements(fit)-1].coef	; make sure this is legit!
; 		nothing.rescaling = sqrt(chi_sq/n) > 1

; 		if keyword_set(display) and keyword_set(interactive)  then begin
; 			smultiplot, /init, [2,2], colw=[1, .2], xgap=0.01, ygap=0.02
; 			erase
; 			smultiplot
; 			loadct, 39, /silent
; 			@psym_circle
; 			ploterror, indgen(M), priors[i_include].coef, priors[i_include].uncertainty, charsize=1, xs=7, ys=8, xmargin=[!x.margin[0],100], yrange=[max([priors[i_include].coef+ priors[i_include].uncertainty, fit[i_include].coef+ fit[i_include].uncertainty]), min([priors[i_include].coef-priors[i_include].uncertainty, fit[i_include].coef-fit[i_include].uncertainty])], /nodata, xrange=[-0.5, M+0.1]
; 			plots, [-.5, M-.5], [0,0], linestyle=2
; 			oploterror, priors[i_include].coef, priors[i_include].uncertainty, psym=3, thick=2
; 			xyouts,  indgen(M), priors[i_include].coef,  '!C!C'+priors[i_include].name, orien=90, charsize=1.5, charthick=2, align=0.5
; 			oploterror, indgen(M) +0.03,  fit[i_include].coef, fit[i_include].uncertainty, color=250, errcolor=250, psym=3, thick=2
; 			legend, /bottom, /left, color=[0,250], linestyle=[0,0], ['priors', "tonight's fit"], nothing=0
; 		
; ; 				smultiplot, /dox, /doy
; ; 				loadct, 0, /silent
; ; 				i_calculated = where(nothing.depth_uncertainty ne 0, complement=i_notyet, n_calculated)
; ; 				ploterror, nothing.duration*24, nothing.depth, nothing.depth_uncertainty , /nodata, xs=3, psym=8, charsize=1, yno=0, xmargin=[!x.margin[0],100], xtitle='"nothing" Duration', ytitle='"nothing" Depth', yr=reverse(range(nothing.depth, nothing.depth_uncertainty > 0))
; ; 				if n_calculated ne n_elements(nothing.duration) then oploterror, nothing.duration[i_notyet]*24, nothing.depth[i_notyet], nothing.depth_uncertainty[i_notyet] 	, color=150, errcolor=150, psym=8
; ; 				if n_calculated ge 1 then oploterror, nothing.duration[i_calculated]*24, nothing.depth[i_calculated], nothing.depth_uncertainty[i_calculated], psym=8
; ; 				hline, 0, linestyle=2
; 		
; 	
; 			smultiplot
; 			loadct, 39, /silent
; 			if n gt 1 then begin
; 				t = lc[i_consider].hjd -  nothing.hjd
; 				yrange = [max( lc[i_consider].flux+2*lc[i_consider].fluxerr), min(  lc[i_consider].flux - 2*lc[i_consider].fluxerr)]
; 				ploterror, 24*t, lc[i_consider].flux, lc[i_consider].fluxerr, psym=8, title='NIGHT'+strcompress(/remo, tonight), xs=3, yrange=yrange, xtitle='Time from Mid-"nothing" (hours)', ytitle='Flux (mag.)', charsize=1
; 				oplot, 24*t, model, color=250, thick=2, linestyle=2
; 			endif else plot, [0]
; 			smultiplot, /def
; 			if question('curious?', interactive=interactive) then stop
; 		endif
; ;	endfor

>>>>>>> other
	return, nothing
END